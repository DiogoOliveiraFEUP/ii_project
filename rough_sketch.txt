requisito 1{
    -bloco de tapetes lineares
    -bloco tapetes rot
    -bloco maquina
    -bloco master
    -série de caminhos entre armazem e maquinas/tapetes
    -gestor de armazem

    Lógica por trás do funcionamento do plc:
        -Conjunto de Peças
            -Peças
                -Conjunto de caminhos
                    -caminhos
                        -Tapetes
                        -Rotativos
                        -Máquinas
}


### "Pedido"  = O que recebe por UDP/IP - XML
            . Transformação de Peças
            . Descarga de Peças
            . Existências de Peças
            . Lista de Ordens

### "Ordem"  = pedido a efetuar na fábrica/PLC
            . Transformação de Peças
            . Descarga de Peças

//Na realidade, uma ordem tem "n" ordens iguais a executar sequencialmente

### "Transformação" = parte da ordem de transformação de peças
    
    "Ordem" P1 [->] P5 = "Transformações" P1->P2 + P2->P3 + P3->P4 + P4->P5



requisito_2(){
    
    
    // Thread:
    - Listener(){
        . Espera até receber novo pacote UDP/IP
        . Quando recebe chama parser
            
            - Parser()
                . Deteta tipo de pedido
                . Desconstroi pedido
                . Trata do pedido
                    * Transformação de Peças
                        - Inserir na DB
                        - Scheduler()
                    * Descarga de Peças
                        - Inserir na DB
                        - Scheduler()
                    * Existência de Peças -> Executar Pedido
                        . Ir buscar à DB
                        . Enviar resposta UDP/IP
                    * Lista de Ordens -> Executar Pedido
                        . Ir buscar à DB
                        . Enviar resposta UDP/IP
    }

    - Scheduler( List<Transformações> , List<Orders_atuais> ){    
        
        . Lê ordens não agendadas e ordens agendadas da DB
        . Define:
            - Organização temporal das ordens
            - Separação das ordens em sub_ordens (no limite em transformações)
            - Alocação de recursos (máquinas) às ordens
        
        . Insere na DB as ordens agendadas com as novas definições
    }
    
    //Thread:
    - Order_Manager(){
        . Vê se uma ordem está pronta
        . Manda executar ordens
    }

    //Thread:
    - Order_Executer(){
        . Gere Tapetes, Gere Máquinas e Armazém necessários para executar a ordem
            - Gere caminhos
        . Gere Troca de Ferramentas

        . Handler para OPC-UA?

    }

    //Thread:
    - Interface_Grafica(){
        // Interface gráfica tipo Scada, JavaSwing?

        . Estatisticas
        . Estado da fábrica
        . Ordens em espera
        . Ações? (emergência, ... )?
    }
    
}